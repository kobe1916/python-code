//py
class Solution:
    def __init__(self):
        self.maxString = []
    def longestSubString(self, inputString):
        if inputString == '':
            return ''
        dic = {}
        dic = dic.fromkeys(inputString, 0)
        self.maxString.append(inputString[0])
        for i in range(len(inputString)):
            for j in range(i, len(inputString)):
                if dic[inputString[j]] != 0:
                    dic = dic.fromkeys(inputString, 0)
                    break
                else:
                    if j - i + 1 > len(self.maxString[0]):
                        self.maxString = []
                        self.maxString.append(inputString[i:j+1])
                    elif j - i + 1 == len(self.maxString[0]):
                        self.maxString.append(inputString[i:j+1])
                    dic[inputString[j]] += 1



//java
import java.util.HashMap;
import java.util.Map;
 
public class LongestNoRepeatCharactorSubstring {
 
	//求最长无重复字符子串
	public static int lengthOfLongestSubstring(String s){
		
		
		Map<Character,Integer>  map = new HashMap<Character,Integer>();
		//map中的键key存放字符串中出现的字符，值value存放该字符当前的位置
		
		int maxLength = 0;	//保存最长字串长度
		int now = 0;		//记录头指针位置
		
		for(int i=0; i<s.length(); i++ ){
			
			if(map.containsKey(s.charAt(i))){//如果map中已存在当前字符
				now = Math.max(now, map.get(s.charAt(i))+1);//更新当前指针位置，如果当前指针大，则使用当前指针，否则使用该指针下一个字符的位置
				if((i-now+1) > maxLength){
					maxLength = i-now+1;
				}
				
			}else{		//map中不存在当前字符
				
				if((i-now+1) > maxLength){ //更新最长字串的长度
					maxLength = i-now+1;
				}
				
			}
			
			map.put(s.charAt(i), i);//修改当前字符的value，记录最新位置	
		}
		return maxLength;
	}
	
	public static void main(String[] args) {
		
		String s = "abba";
		System.out.println(lengthOfLongestSubstring(s));
 
	}
#解题思路：

借助hashmap来解决，map的键key存放字符串中出现的字符，值value存放该字符当前的位置。

首先创建一个头指针now，指向当前子串的开头，maxLength保存当前最大长度；刚开始，now指向字符串的第一个字符，随着遍历字符串，如果map中不包含当前字符，那么now不变，用字符当前位置和now的位置相减，然后再与最大长度进行比较，更新maxLength；再将当前字符以及它的位置保存到map中；如果map中包含当前字符，则需改变头指针now所指的位置（将头指针当前位置与map中当前字符所存位置的下一个位置进行比较，选择最大者作为最新头指针所指位置），然后再更新maxLength；不管map中有无当前字符，都需在map中更新，记录字符最近出现的位置。

比如：abba

（1）初始：maxLength=0；

（2）abba：map中不含该字符， now 指向第一个a； map中添加该字符及其位置，<a,0>； maxLength=1；

（3）abba： map中不含该字符，now指向第一个a； map中添加该字符及其位置，<b,1>； maxLength=2；

（4）abba： map中含有相同字符b，now更新，指向2  { [（map中b的位置为1 ) +1 ] > (now=0）}；map中更新该字符及其位置，<b,2>； maxLength=1；

（5）abba： map中含有该字符，更新map种该字符最新位置，<a,3>；now指向第二个b，maxLength=2；
